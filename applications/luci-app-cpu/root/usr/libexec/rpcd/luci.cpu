#!/usr/bin/env lua

local json = require "luci.jsonc"
local sys  = require "luci.sys"

local methods = {

	getCPUInfo = {
		call = function()
			local rv = {}
			local cpu_temp = string.gsub(sys.exec("sensors | grep 'temp' | cut -c16-22"), "^[%s\n\r\t]*(.-)[%s\n\r\t]*$", "%1")
			local cpu_freqs =sys.exec("cat /sys/devices/system/cpu/cpu*/cpufreq/cpuinfo_cur_freq")
			cpu_freqs=string.sub(cpu_freqs, 1, -2)
            a_cpu_freqs = string.split(cpu_freqs , "\n")
            for i, v in pairs(a_cpu_freqs)  do
                rv[#rv+1] = {
                    core = i,
                    freq = tostring(tonumber(v)/1000) .. "MHz",
                    temp = cpu_temp
                }
            end
			return { coreinfo = rv}
		end
	},

	getETHInfo = {
		call = function()
			local rv = {}

			sys.call("/usr/bin/ethinfo")
			local ok, fd = pcall(io.open, "/tmp/state/ethinfo", "r")
			local line
			for line in fd:lines() do
				local line1
				line1 = string.split(line , " ")
				rv[#rv+1] = {
					name  = line1[1],
					status = line1[2],
					speed  = line1[3],
					duplex = line1[4]
				}
			end
			fd:close()
			return { ethinfo = rv }
		end
	}
}

local function parseInput()
	local parse = json.new()
	local done, err

	while true do
		local chunk = io.read(4096)
		if not chunk then
			break
		elseif not done and not err then
			done, err = parse:parse(chunk)
		end
	end

	if not done then
		print(json.stringify({ error = err or "Incomplete input" }))
		os.exit(1)
	end

	return parse:get()
end

local function validateArgs(func, uargs)
	local method = methods[func]
	if not method then
		print(json.stringify({ error = "Method not found" }))
		os.exit(1)
	end

	if type(uargs) ~= "table" then
		print(json.stringify({ error = "Invalid arguments" }))
		os.exit(1)
	end

	uargs.ubus_rpc_session = nil

	local k, v
	local margs = method.args or {}
	for k, v in pairs(uargs) do
		if margs[k] == nil or
		   (v ~= nil and type(v) ~= type(margs[k]))
		then
			print(json.stringify({ error = "Invalid arguments" }))
			os.exit(1)
		end
	end

	return method
end

if arg[1] == "list" then
	local _, method, rv = nil, nil, {}
	for _, method in pairs(methods) do rv[_] = method.args or {} end
	print((json.stringify(rv):gsub(":%[%]", ":{}")))
elseif arg[1] == "call" then
	local args = parseInput()
	local method = validateArgs(arg[2], args)
	local result, code = method.call(args)
	print((json.stringify(result):gsub("^%[%]$", "{}")))
	os.exit(code or 0)
end
